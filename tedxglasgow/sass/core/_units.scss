// rem/px fallback generator
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: $body-size;
  $px-values: ();
  $rem-values: ();
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    }
    @else if type-of($value) == number and not unitless($value) and unit($value) == px {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    }
    @else if type-of($value) == number and not unitless($value) and unit($value) == "%" {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    }
    @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    }
    @else {
      // unitless value - assume px and calculate rem
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value) px);
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    }
  }
  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

// em value generator
@function em($target, $context: $body-size) {
  @return $target / $context * 1em;
}

// rem value generator
@function rem($target) {
  $context: $body-size;
  @return $target / $context * 1rem;
}